<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="cn.itcast.mybatis.mapper.OrdersMapperCustom">

	<!-- 订单查询关联用户的resultMap 将整个查询单的结果映射到 cn.itcast.mybatis.po.Orders中 -->
	<resultMap type="cn.itcast.mybatis.po.Orders" id="OrdersUserResultMap">
		<!-- 配置映射的订单信息 -->
		<!-- id:指定查询列中的唯一标识，订单信息中的唯一标识，如果有对个列组成的唯一标识，配置多个id column:订单信息的唯一标识列 property:订单信息的唯一标识 
			列所映射到Orders中那个属性 -->
		<id column="id" property="id"></id>
		<result column="user_id" property="userId" />
		<result column="number" property="number" />
		<result column="createtime" property="createtime" />
		<result column="note" property="note" />

		<!-- 配置映射的关联的用户信息 -->
		<!-- association:用于映射关联查询单个对象的信息 property：要将关联查询到的的用户信息映射到Orders中哪个属性 -->
		<association property="user" javaType="cn.itcast.mybatis.po.User">
			<!-- id:关联查询用户的唯一标识 column:指定唯一标识用户信息的列 property:映射到user的哪个属性 -->
			<id column="user_id" property="id" />
			<result column="username" property="username" />
			<result column="sex" property="sex" />
			<result column="address" property="address" />
		</association>
	</resultMap>

	<!-- 订单及订单明细的resultMap 使用extends继承，不用再配置订单信息和用户信息映射 -->
	<resultMap type="cn.itcast.mybatis.po.Orders" id="OrdersAndOrderdetailResultMap"
		extends="OrdersUserResultMap">
		<!-- 订单信息 -->
		<!-- 用户信息 -->
		<!-- 使用extends继承，不用再配置订单信息和用户信息映射 -->

		<!-- 订单明细信息 一个订单关联出了多条明细，要是用collection进行映射 collection:对关联查询到多条记录映射到集合对象中 
			property:将关联查询到多条记录映射到cn.itcast.mybatis.po.Orders哪个属性 ofType:指定映射到list集合属性中pojo的类型 -->
		<collection property="orderdetails" ofType="cn.itcast.mybatis.po.Orderdetail">
			<!-- id:订单明细唯一标识 property:要将订单明细的唯一标识映射到 cn.itcast.mybatis.po.Orderdetail的哪个属性 -->
			<id column="orderdetail_id" property="id" />
			<result column="itemsId" property="itemsId" />
			<result column="itemsNum" property="itemsNum" />
			<result column="ordersId" property="ordersId" />
		</collection>
	</resultMap>

	<!-- 查询用户及购买的商品 -->
	<resultMap type="cn.itcast.mybatis.po.User" id="UserAndItemsResultMap">
		<id column="userId" property="id" />
		<result column="username" property="username" />
		<result column="sex" property="sex" />
		<result column="address" property="address" />

		<!-- 订单信息 一个用户对应多个订单，使用collection映射 -->
		<collection property="ordersList" ofType="cn.itcast.mybatis.po.Orders">
			<id column="id" property="id" />
			<result column="userId" property="userId" />
			<result column="number" property="number" />
			<result column="createtime" property="createtime" />
			<result column="note" property="note" />

			<!-- 订单明细 一个订单包括多个明细 -->
			<collection property="orderdetails" ofType="cn.itcast.mybatis.po.Orderdetail">
				<id column="orderdetail_id" property="id" />
				<result column="itemsId" property="itemsId" />
				<result column="itemsNum" property="itemsNum" />
				<result column="ordersId" property="ordersId" />

				<!-- 商品信息 一个订单明细对应一个商品信息 -->
				<association property="items" javaType="cn.itcast.mybatis.po.Items">
					<id column="itemsId" property="id" />
					<result column="items_name" property="name" />
					<result column="detail" property="detail" />
					<result column="price" property="price" />
				</association>
			</collection>
		</collection>
	</resultMap>

	<select id="findOrdersUser" resultType="cn.itcast.mybatis.po.OrdersCustom">
		select orders.* ,
		user.id
		user_id,
		user.username,
		user.sex,
		user.address
		from orders
		join user on
		orders.userId=user.id
	</select>

	<!-- 查询订单关联查询用户信息(一对一)，使用resultmap -->
	<select id="findOrdersUserResultMap" resultMap="OrdersUserResultMap">
		select orders.* ,
		user.id user_id,
		user.username,
		user.sex,
		user.address
		from
		orders
		join user
		on orders.userId=user.id
	</select>

	<!-- 查询订单关联查询用户及订单明细（一对多），使用resultmap -->
	<select id="findOrdersAndOrderdetailResultMap" resultMap="OrdersAndOrderdetailResultMap">
		select
		orders.* ,
		user.username,
		user.sex,
		user.address,
		orderdetail.id
		orderdetail_id,
		orderdetail.itemsId,
		orderdetail.itemsNum,
		orderdetail.ordersId
		from orders
		join user on orders.userId=user.id
		join
		orderdetail on orderdetail.ordersId=orders.id
	</select>

	<!-- 查询用户及购买的商品信息，使用resultMap -->
	<select id="findUserAndItemsResultMap" resultMap="UserAndItemsResultMap">
		select orders.*
		,
		user.id userId,
		user.username,
		user.sex,
		user.address,
		orderdetail.id
		orderdetail_id,
		orderdetail.itemsId,
		orderdetail.itemsNum,
		orderdetail.ordersId,
		items.name items_name,
		items.detail,
		items.price
		from orders
		join user on orders.userId=user.id
		join orderdetail on
		orderdetail.ordersId=orders.id
		join items on
		orderdetail.itemsId=items.id
	</select>

	<!-- 延迟加载的resultMap -->
	<resultMap type="cn.itcast.mybatis.po.Orders" id="OrderUserLazyLoadingResultMap">
		<!-- 对订单信息就行映射配置 -->
		<id column="id" property="id"></id>
		<result column="user_id" property="userId" />
		<result column="number" property="number" />
		<result column="createtime" property="createtime" />
		<result column="note" property="note" />
		<!-- 实现对用户信息进行延迟加载
		select:指定延迟加载需要执行的statement的id(是根据用户的userId查询用户的statement)
		要使用userMapper.xml中的findUserById完成根据用户的id用户信息查询，如果findUserById不在本mapper中需要前边加namespace
		column:订单信息中关联用户信息查询的列，是userId -->
		<association property="user" javaType="cn.itcast.mybatis.po.User" 
		select="cn.itcast.mybatis.mapper.UserMapper.findUserById" column="userId">
			<!-- 实现对用户信息就行延迟加载 -->
		</association>
	</resultMap>
	<!-- 查询订单关联查询用户，用户信息需要延迟加载 -->
	<select id="findOrderUserLazyLoading" resultMap="">
		select * from
		orders
	</select>
</mapper>